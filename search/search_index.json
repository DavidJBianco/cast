{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Cast \u00b6 Cast is an installer tool for any Cast distro like SIFT or REMNUX . Usage \u00b6 cast install <owner/repo | alias> Note: there are only two aliases currently supported, sift and remnux which are resolved to teamdfir/sift-saltstack and remnux/salt-states respectively. What is a Cast Distro? \u00b6 Simply put a cast distro is one published by the cast binary, however it's a bit more complicated than that. The underlying technology used for installing the distro is Saltstack. There are only two (2) version 1 cast distros out there and they are SIFT and REMnux and what makes them a v1 is the way the release files are generated and signed and how the saltstack files are organized in the repository. A version 2 cast distro is one like example-distro-saltstack where the salt states start in the root of the project and the release is generated by the cast-devtools . The reason for moving the states to the root is for git submodule usage for distros that extend another distro. Configuration \u00b6 Cast is configured via the .cast.yml file in the root of the cast distro project. This configuration is required and contains important information like what GitHub Repository should releases be published to, what the manifest file contents should be. Part of the configuration is the manifest definition that ultimately gets uploaded as a release asset. The manifest dictates things like base , modes , and supported operating systems . base - this is the name of the base directory that the files should be extracted into modes - this is a way to define modes that the user can specify along with the default mode, if none is specified supported_os - this is a way to define what operating systems are supported For Developers \u00b6 If your distro is called alpha then your base should be alpha , all salt states will be homed into a directory called alpha Aliases \u00b6 Cast has the concept of aliases and it's possible to add additional distros to this alias list. However the aliases serve a more specific purpose for supporing backwards compatibility for older versions of SIFT and REMnux that were not released as a cast distro originally. Developers \u00b6 Developing a distro for cast is very simple, this documentation will walk you through cast initialization. Saltstack \u00b6 To make embedding a distro easier in another distro both for the community and for SANS builds purposes, the salt states have now been moved to the root of the project. This allows for a repo to be submoduled into another repo and the manifest.yml dictates to the installer how things should be extracted and installed. Futhermore the devtools contains commands to help developers test their states in the correct structure format. Release \u00b6 Requirements Tag must be created outside of the tool and pushed to the remote Cosign private key and public key must be present in the repo Creating a release has never been more simply. However one thing is required, that you tag and push the tag to GitHub prior to running the command. git tag v1.0.0 && git push origin --tags Then you simply run the release command from your local branch. cast-devtools release","title":"Home"},{"location":"#cast","text":"Cast is an installer tool for any Cast distro like SIFT or REMNUX .","title":"Cast"},{"location":"#usage","text":"cast install <owner/repo | alias> Note: there are only two aliases currently supported, sift and remnux which are resolved to teamdfir/sift-saltstack and remnux/salt-states respectively.","title":"Usage"},{"location":"#what-is-a-cast-distro","text":"Simply put a cast distro is one published by the cast binary, however it's a bit more complicated than that. The underlying technology used for installing the distro is Saltstack. There are only two (2) version 1 cast distros out there and they are SIFT and REMnux and what makes them a v1 is the way the release files are generated and signed and how the saltstack files are organized in the repository. A version 2 cast distro is one like example-distro-saltstack where the salt states start in the root of the project and the release is generated by the cast-devtools . The reason for moving the states to the root is for git submodule usage for distros that extend another distro.","title":"What is a Cast Distro?"},{"location":"#configuration","text":"Cast is configured via the .cast.yml file in the root of the cast distro project. This configuration is required and contains important information like what GitHub Repository should releases be published to, what the manifest file contents should be. Part of the configuration is the manifest definition that ultimately gets uploaded as a release asset. The manifest dictates things like base , modes , and supported operating systems . base - this is the name of the base directory that the files should be extracted into modes - this is a way to define modes that the user can specify along with the default mode, if none is specified supported_os - this is a way to define what operating systems are supported","title":"Configuration"},{"location":"#for-developers","text":"If your distro is called alpha then your base should be alpha , all salt states will be homed into a directory called alpha","title":"For Developers"},{"location":"#aliases","text":"Cast has the concept of aliases and it's possible to add additional distros to this alias list. However the aliases serve a more specific purpose for supporing backwards compatibility for older versions of SIFT and REMnux that were not released as a cast distro originally.","title":"Aliases"},{"location":"#developers","text":"Developing a distro for cast is very simple, this documentation will walk you through cast initialization.","title":"Developers"},{"location":"#saltstack","text":"To make embedding a distro easier in another distro both for the community and for SANS builds purposes, the salt states have now been moved to the root of the project. This allows for a repo to be submoduled into another repo and the manifest.yml dictates to the installer how things should be extracted and installed. Futhermore the devtools contains commands to help developers test their states in the correct structure format.","title":"Saltstack"},{"location":"#release","text":"Requirements Tag must be created outside of the tool and pushed to the remote Cosign private key and public key must be present in the repo Creating a release has never been more simply. However one thing is required, that you tag and push the tag to GitHub prior to running the command. git tag v1.0.0 && git push origin --tags Then you simply run the release command from your local branch. cast-devtools release","title":"Release"},{"location":"distro/","text":"Distro \u00b6 A Cast Distro is simply a self contained set of Saltstack states that get bundled up by the Cast binary such that they are signed and downloadable by the tool to be installed against a linux system. If you are familiar with Saltstack this should be a fairly straightfoward process, if you are however unfamiliar with Saltstack some additional learning will be required to get up to speed, to help with that there's a saltstack primer located in this documentation. Organization \u00b6 The most important aspect of a Cast distro is how the salt states are organized. Typically speaking you'd have a directly, let's call it example and within it you'd define a state file server.sls and this file would do something like pkg.install of htop . However to allow Cast distributions to be required by other Cast distributions, we leave the creation of the folder example up to Cast, instead a manifest is defined to set the name of the project (aka base) of where all the files starting at the root of the repository will be extracted to. The primary purpose for this is to allow another distro to use git submodules to essentially include distro A into distro B.","title":"Distro"},{"location":"distro/#distro","text":"A Cast Distro is simply a self contained set of Saltstack states that get bundled up by the Cast binary such that they are signed and downloadable by the tool to be installed against a linux system. If you are familiar with Saltstack this should be a fairly straightfoward process, if you are however unfamiliar with Saltstack some additional learning will be required to get up to speed, to help with that there's a saltstack primer located in this documentation.","title":"Distro"},{"location":"distro/#organization","text":"The most important aspect of a Cast distro is how the salt states are organized. Typically speaking you'd have a directly, let's call it example and within it you'd define a state file server.sls and this file would do something like pkg.install of htop . However to allow Cast distributions to be required by other Cast distributions, we leave the creation of the folder example up to Cast, instead a manifest is defined to set the name of the project (aka base) of where all the files starting at the root of the repository will be extracted to. The primary purpose for this is to allow another distro to use git submodules to essentially include distro A into distro B.","title":"Organization"}]}